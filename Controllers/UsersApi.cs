/*
 * Softomate Person API
 *
 * This is a API for Softomate testwork
 *
 * OpenAPI spec version: 1.0.0
 * Contact: imail.for.iwork@gmail.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.WebUtilities;
using Microsoft.Extensions.Logging;
using Microsoft.Extensions.Primitives;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using IO.Swagger.Attributes;
using IO.Swagger.Models;
using Softomate.context;

namespace IO.Swagger.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    public class UsersApiController : Controller
    {
        private IContext db;
        
        public UsersApiController(IContext context)
        {
            db = context;
        }

        /// <summary>
        /// get all persons
        /// </summary>
        /// <remarks>get all person in system</remarks>
        /// <response code="200">all persons taken</response>
        [HttpGet]
        [Route("/api/v1/softomate/person")]
        [ValidateModelState]
        [SwaggerOperation("GetAllPersons")]
        [SwaggerResponse(200, typeof(List<Person>), "OK")]
        public virtual IActionResult GetAllPersons()
        {
                return new ObjectResult(db.GetPersons());
        }
        
        /// <summary>
        /// create Person
        /// </summary>
        /// <remarks>create new Person</remarks>
        /// <param name="person"></param>
        /// <response code="200">OK</response>
        /// <response code="409">Conflict</response>
        [HttpPost]
        [Route("/api/v1/softomate/person")]
        [ValidateModelState]
        [SwaggerOperation("CreateNewPerson")]
        [SwaggerResponse(200, typeof(string), "OK")]
        [SwaggerResponse(409, typeof(ErrorMessage), "Conflict")]
        public virtual IActionResult CreateNewPerson([FromBody]Person person)
        {

            if (db.CreatePerson(person))
            {
                return new ObjectResult(true);
            }
            
            Response.StatusCode = 409;
            return new ObjectResult(new ErrorMessage()
            {
                Code = HttpStatusCode.Conflict.ToString(),
                Message = "person alredy exists"
            });
        }

        /// <summary>
        /// get person by id
        /// </summary>
        /// <remarks>get Person by id if exists or null otherwise</remarks>
        /// <param name="id"></param>
        /// <response code="200">ok</response>
        /// <response code="404">Not found</response>
        [HttpGet]
        [Route("/api/v1/softomate/person/{id}")]
        [ValidateModelState]
        [SwaggerOperation("GetPersonById")]
        [SwaggerResponse(200, typeof(Person), "OK")]
        [SwaggerResponse(404, typeof(ErrorMessage), "Not found")]
        public virtual IActionResult GetPersonById([FromRoute]string id)
        { 
            var person = db.GetPerson(id);
            
            if (null != person)
            {
                return new ObjectResult(person);
            }
            
            Response.StatusCode = 404;
            return new ObjectResult(
                new ErrorMessage()
                {
                    Code = HttpStatusCode.NotFound.ToString(),
                    Message = "no one person by this id fond"
                }
            );
        }
        
        /// <summary>
        /// delete an Person
        /// </summary>
        /// <remarks>delete an Person</remarks>
        /// <param name="id"></param>
        /// <response code="200">OK</response>
        /// <response code="404">Not found</response>
        [HttpDelete]
        [Route("/api/v1/softomate/person/{id}")]
        [ValidateModelState]
        [SwaggerOperation("DeletePerson")]
        [SwaggerResponse(200, typeof(string), "OK")]
        [SwaggerResponse(404, typeof(ErrorMessage), "Not found")]
        public virtual IActionResult DeletePerson([FromRoute]string id)
        {
            if (db.DeletePerson(id))
            {
                return new ObjectResult(true);
            }
            Response.StatusCode = 404;
            return new ObjectResult(
                new ErrorMessage()
                {
                    Code = HttpStatusCode.NotFound.ToString(),
                    Message = "nothing to delete"
                }
            );

        }

        /// <summary>
        /// update an Person record
        /// </summary>
        /// <remarks>update an Person record</remarks>
        /// <param name="person"></param>
        /// <response code="200">OK</response>
        /// <response code="404">Not found</response>
        [HttpPut]
        [Route("/api/v1/softomate/person")]
        [ValidateModelState]
        [SwaggerOperation("UpdatePerson")]
        [SwaggerResponse(200, typeof(string), "OK")]
        [SwaggerResponse(404, typeof(ErrorMessage), "Not found")]
        public virtual IActionResult UpdatePerson([FromBody]Person person)
        {
            if (db.UpdatePerson(person))
            {
                return new ObjectResult(true);
            }
            Response.StatusCode = 404;
            return new ObjectResult(
                new ErrorMessage()
                {
                    Code = HttpStatusCode.NotFound.ToString(),
                    Message = "nothing to update by this id"
                }
            );
        }
    }
}
